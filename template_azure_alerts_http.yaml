zabbix_export:
  version: "7.0"
  template_groups:
    - uuid: c2c162144c2d4c5491c8801193af4945
      name: Templates/Cloud
  templates:
    - uuid: 9d99acfd10674684b36406a85ac3eece
      template: "Azure Alerts by HTTP"
      name: "Azure Alerts by HTTP"
      description: |
        This template is designed to scrap Azure Alerts by HTTP.
        It works without any external scripts and uses the script item.

        Setup:
          1. Create an Azure service principal via the Azure command-line interface (Azure CLI) for your subscription.
            `az ad sp create-for-rbac --name zabbix --role reader --scope /subscriptions/<subscription_id>`
            See https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli for more details.
          2. Link the template to a host.
          3. Configure the macros: {$AZURE.APP.ID}, {$AZURE.PASSWORD}, {$AZURE.TENANT.ID}, {$AZURE.SUBSCRIPTION.ID}, and {$AZURE.RESOURCE.ID}.

        {$AZURE.ALERTNAME.NOT_MATCHES} - filter out alerts eg (^Something failed) - regexp format

        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/

        Generated by official Zabbix template tool "Templator"
      groups:
        - name: Templates/Cloud
      items:
        - uuid: 2ae65d2bc26d47cea7bf0c509c91ed7f
          name: "Get data"
          type: SCRIPT
          key: azure.alerts.data.get
          delay: 5m
          history: "0"
          value_type: TEXT
          trends: "0"
          params: |
            var Azure = {
            	params: {},
            	token: null,

            	setParams: function (params) {
            		['app_id', 'password', 'tenant_id', 'subscription_id'].forEach(function (field) {
            			if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
            				throw 'Required param is not set: ' + field + '.';
            			}
            		});

            		Azure.params = params;
            	},

            	login: function () {
            		var response, login = new HttpRequest();

            		if (typeof Azure.params.proxy !== 'undefined' && Azure.params.proxy !== '') {
            			login.setProxy(Azure.params.proxy);
            		}

            		login.addHeader('Content-Type: application/x-www-form-urlencoded');
            		response = login.post(
            			'https://login.microsoftonline.com/' + encodeURIComponent(Azure.params.tenant_id) + '/oauth2/token',
            			'grant_type=client_credentials&resource=' + encodeURIComponent('https://management.azure.com/') + '&client_id=' + encodeURIComponent(Azure.params.app_id) + '&client_secret=' + encodeURIComponent(Azure.params.password)
            		);

            		if (login.getStatus() !== 200) {
            			throw 'Login failed with status code ' + login.getStatus() + ': ' + response;
            		}

            		try {
            			response = JSON.parse(response);
            		}
            		catch (error) {
            			throw 'Failed to parse login session response.';
            		}

            		if (!response.hasOwnProperty('access_token')) {
            			throw 'Authentication response does not contain access token.';
            		}

            		Azure.token = response['access_token'];
            	},

            	request: function (url) {
            		var response, request = new HttpRequest();

            		if (typeof Azure.params.proxy !== 'undefined' && Azure.params.proxy !== '') {
            			request.setProxy(Azure.params.proxy);
            		}

            		if (!Azure.token) {
            			throw 'Request does not contain access token.';
            		}

            		request.addHeader('Content-Type: application/json');
            		request.addHeader('Authorization: Bearer ' + Azure.token);
            		Zabbix.log(4, '[ AzureAlert ] request url: ' + url);

            		response = request.get(url);

            		if (request.getStatus() !== 200) {
            			throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
            		}

            		try {
            			return JSON.parse(response);
            		}
            		catch (error) {
            			throw 'Failed to parse response received from API.';
            		}
            	},

            	getField: function (data, path) {
            		var steps = path.split('.');

            		for (var i = 0; i < steps.length; i++) {
            			var step = steps[i];
            			if (typeof data !== 'object' || typeof data[step] === 'undefined') {
            				throw 'Required field was not found: ' + path;
            			}
            			data = data[step];
            		}

            		return data;
            	},

            	getAlertData: function () {
            		alerts = Azure.getField(Azure.request('https://management.azure.com/subscriptions/' + Azure.params.subscription_id + '/providers/Microsoft.AlertsManagement/alerts?api-version=2018-05-05'), 'value');
            		return alerts;
            	}
            };

            try {
            	Azure.setParams(JSON.parse(value));
            	Azure.login();
            	return JSON.stringify(Azure.getAlertData());
            }
            catch (error) {
            	error += (String(error).endsWith('.')) ? '' : '.';
            	Zabbix.log(3, '[ AzureAlerts ] ERROR: ' + error);
            	return JSON.stringify({ 'error': error });
            }
          description: "The result of API requests is expressed in the JSON."
          timeout: "{$AZURE.DATA.TIMEOUT}"
          parameters:
            - name: app_id
              value: "{$AZURE.APP.ID}"
            - name: password
              value: "{$AZURE.PASSWORD}"
            - name: proxy
              value: "{$AZURE.PROXY}"
            - name: subscription_id
              value: "{$AZURE.SUBSCRIPTION.ID}"
            - name: tenant_id
              value: "{$AZURE.TENANT.ID}"
          tags:
            - tag: class
              value: alert
            - tag: component
              value: raw
      discovery_rules:
        - uuid: a0ff9f40ea744793a0688eea3047602f
          name: "Azure Alert - discovery rule"
          type: DEPENDENT
          key: azure.alert.get
          delay: "0"
          filter:
            conditions:
              - macro: "{#ALERT.NAME}"
                value: "{$AZURE.ALERTNAME.NOT_MATCHES}"
                operator: NOT_MATCHES_REGEX
                formulaid: A
          item_prototypes:
            - uuid: dca7f4b748fa44b987ffc3f364ab6545
              name: "Azure Alert - {#ALERT.NAME} - monitorCondition"
              type: DEPENDENT
              key: "azure.alert.get[{#ALERT.ID},monitorCondition]"
              delay: "0"
              value_type: TEXT
              trends: "0"
              description: "{#ALERT.ID}"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ALERT.ID}")].properties.essentials.monitorCondition.first()'
              master_item:
                key: azure.alerts.data.get
            - uuid: c4521f9a5a4f481b90b363c391cd1b1e
              name: "Azure Alert - {#ALERT.NAME} - severity"
              type: DEPENDENT
              key: "azure.alert.get[{#ALERT.ID},severity]"
              delay: "0"
              value_type: TEXT
              trends: "0"
              description: "{#ALERT.ID}"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ALERT.ID}")].properties.essentials.severity.first()'
              master_item:
                key: azure.alerts.data.get
            - uuid: 6ea1f86ca0b24ab4a0debf8aff6ee7c8
              name: "Azure Alert - {#ALERT.NAME} - state"
              type: DEPENDENT
              key: "azure.alert.get[{#ALERT.ID},state]"
              delay: "0"
              value_type: TEXT
              trends: "0"
              description: "{#ALERT.ID}"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ALERT.ID}")].properties.essentials.alertState.first()'
              master_item:
                key: azure.alerts.data.get
            - uuid: a162d48400ed44388c590298a99bd1a9
              name: "Azure Alert - {#ALERT.NAME} - targetResourceName"
              type: DEPENDENT
              key: "azure.alert.get[{#ALERT.ID},targetResourceName]"
              delay: "0"
              value_type: TEXT
              trends: "0"
              description: "{#ALERT.ID}"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ALERT.ID}")].properties.essentials.targetResourceName.first()'
              master_item:
                key: azure.alerts.data.get
          trigger_prototypes:
            - uuid: eba26789ffc1475ca34373bc9ec0f512
              expression: 'last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},severity],#1)="Sev0" and last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},state],#1)="New"'
              name: "Azure Alert - {#ALERT.NAME}"
              priority: DISASTER
              description: "https://portal.azure.com/{#ALERT.ID}"
            - uuid: 3152340d7c8a44f089bad73ec9183103
              expression: 'last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},severity],#1)="Sev1" and last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},state],#1)="New"'
              name: "Azure Alert - {#ALERT.NAME}"
              priority: HIGH
              description: "https://portal.azure.com/{#ALERT.ID}"
            - uuid: fa385402fd6f40a294e9cb536b89d7a0
              expression: 'last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},severity],#1)="Sev2" and last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},state],#1)="New"'
              name: "Azure Alert - {#ALERT.NAME}"
              priority: AVERAGE
              description: "https://portal.azure.com/{#ALERT.ID}"
            - uuid: 852eb4ace4b24f4793a9c5e00f1af273
              expression: 'last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},severity],#1)="Sev3" and last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},state],#1)="New"'
              name: "Azure Alert - {#ALERT.NAME}"
              priority: WARNING
              description: "https://portal.azure.com/{#ALERT.ID}"
            - uuid: f83ab414baca4332a27cc24111e305c6
              expression: 'last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},severity],#1)="Sev4" and last(/Azure Alerts by HTTP/azure.alert.get[{#ALERT.ID},state],#1)="New"'
              name: "Azure Alert - {#ALERT.NAME}"
              priority: INFO
              description: "https://portal.azure.com/{#ALERT.ID}"
          master_item:
            key: azure.alerts.data.get
          lld_macro_paths:
            - lld_macro: "{#ALERT.ID}"
              path: $.id
            - lld_macro: "{#ALERT.NAME}"
              path: $.name
            - lld_macro: "{#ALERT.RESOURCENAME}"
              path: $.properties.essentials.targetResourceName
            - lld_macro: "{#ALERT.RULE}"
              path: $.properties.essentials.alertRule
            - lld_macro: "{#ALERT.SEVERITY}"
              path: $.properties.essentials.severity
            - lld_macro: "{#ALERT.STATE}"
              path: $.properties.essentials.alertState
            - lld_macro: "{#ALERT.SUPPRESSED}"
              path: $.properties.essentials.actionStatus.isSuppressed
      tags:
        - tag: class
          value: alert
        - tag: target
          value: azure
      macros:
        - macro: "{$AZURE.ALERTNAME.NOT_MATCHES}"
        - macro: "{$AZURE.APP.ID}"
          description: "The App ID of Microsoft Azure."
        - macro: "{$AZURE.DATA.TIMEOUT}"
          value: 15s
          description: "API response timeout."
        - macro: "{$AZURE.PASSWORD}"
          description: "Microsoft Azure password."
        - macro: "{$AZURE.PROXY}"
          description: "Sets the HTTP proxy value. If this macro is empty, then no proxy is used."
        - macro: "{$AZURE.RESOURCE.ID}"
          description: "Microsoft Azure virtual machine ID."
        - macro: "{$AZURE.SUBSCRIPTION.ID}"
          description: "Microsoft Azure subscription ID."
        - macro: "{$AZURE.TENANT.ID}"
          description: "Microsoft Azure tenant ID."
      valuemaps:
        - uuid: 3fcdea3955074b58a1ad798c747d63b0
          name: "Azure resource health state"
          mappings:
            - value: "0"
              newvalue: Available
            - value: "1"
              newvalue: Degraded
            - value: "2"
              newvalue: Unavailable
            - value: "3"
              newvalue: Unknown
