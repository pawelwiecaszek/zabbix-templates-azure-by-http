zabbix_export:
  version: "7.0"
  template_groups:
    - uuid: c2c162144c2d4c5491c8801193af4945
      name: Templates/Cloud
  templates:
    - uuid: 5d17a8523e364770ad9830f4389cb6ba
      template: "Azure Service Principals by HTTP"
      name: "Azure Service Principals by HTTP"
      description: |
        This template is designed to scrap Azure Service Principals by HTTP.
        It works without any external scripts and uses the script item.

        Setup:
          1. Create an Azure service principal via the Azure command-line interface (Azure CLI) for your subscription.
            `az ad sp create-for-rbac --name zabbix --role reader --scope /subscriptions/<subscription_id>`
            See https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli for more details.
          2. Link the template to a host.
          3. Configure the macros: {$AZURE.APP.ID}, {$AZURE.PASSWORD}, {$AZURE.TENANT.ID}.

        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/

        Generated by official Zabbix template tool "Templator"
      groups:
        - name: Templates/Cloud
      items:
        - uuid: 56793674f88d467bb5dc390c5b004f51
          name: "Get data"
          type: SCRIPT
          key: azure.alerts.data.get
          delay: 30m
          history: "0"
          value_type: TEXT
          trends: "0"
          params: |
            var Azure = {
            	params: {},
            	token: null,

            	setParams: function (params) {
            		['app_id', 'password', 'tenant_id'].forEach(function (field) {
            			if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
            				throw 'Required param is not set: ' + field + '.';
            			}
            		});

            		Azure.params = params;
            	},

            	login: function () {
            		var response, login = new HttpRequest();

            		if (typeof Azure.params.proxy !== 'undefined' && Azure.params.proxy !== '') {
            			login.setProxy(Azure.params.proxy);
            		}

            		login.addHeader('Content-Type: application/x-www-form-urlencoded');

            		response = login.post(
            			'https://login.microsoftonline.com/' + encodeURIComponent(Azure.params.tenant_id) + '/oauth2/v2.0/token',
            			'grant_type=client_credentials&scope=https://graph.microsoft.com/.default&client_id=' + encodeURIComponent(Azure.params.app_id) + '&client_secret=' + encodeURIComponent(Azure.params.password)
            		);

            		if (login.getStatus() !== 200) {
            			throw 'Login failed with status code ' + login.getStatus() + ': ' + response;
            		}

            		try {
            			response = JSON.parse(response);
            		}
            		catch (error) {
            			throw 'Failed to parse login session response.';
            		}

            		if (!response.hasOwnProperty('access_token')) {
            			throw 'Authentication response does not contain access token.';
            		}

            		Azure.token = response['access_token'];
            	},

            	request: function (url) {
            		var response, request = new HttpRequest();

            		if (typeof Azure.params.proxy !== 'undefined' && Azure.params.proxy !== '') {
            			request.setProxy(Azure.params.proxy);
            		}

            		if (!Azure.token) {
            			throw 'Request does not contain access token.';
            		}

            		request.addHeader('Content-Type: application/json');
            		request.addHeader('Authorization: Bearer ' + Azure.token);
            		Zabbix.log(4, '[ AzureServicePrincipals ] request url: ' + url);

            		response = request.get(url);

            		if (request.getStatus() !== 200) {
            			throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
            		}

            		try {
            			return JSON.parse(response);
            		}
            		catch (error) {
            			throw 'Failed to parse response received from API.';
            		}
            	},

            	getField: function (data, path) {
            		var steps = path.split('.');

            		for (var i = 0; i < steps.length; i++) {
            			var step = steps[i];
            			if (typeof data !== 'object' || typeof data[step] === 'undefined') {
            				throw 'Required field was not found: ' + path;
            			}
            			data = data[step];
            		}

            		return data;
            	},

            	getSPData: function () {
            		spdata = Azure.getField(Azure.request('https://graph.microsoft.com/v1.0/applications'), 'value');
            		var passwordscredentials = [];

            		for (var i = 0; i < spdata.length; i++) {
                		var creds = spdata[i].passwordCredentials;
                		if (creds && creds.length > 0) {
            				for (var p = 0; p < creds.length; p++) {
            					creds[p]["appId"] = spdata[i].appId;
            					creds[p]["appdisplayName"] = spdata[i].displayName;
            					passwordscredentials.push(creds[p]);
            				}
                		}
            		}

            		return passwordscredentials;
            	}
            };

            try {
            	Azure.setParams(JSON.parse(value));
            	Azure.login();
            	return JSON.stringify(Azure.getSPData());
            }
            catch (error) {
            	error += (String(error).endsWith('.')) ? '' : '.';
            	Zabbix.log(3, '[ AzureServicePrincipals ] ERROR: ' + error);
            	return JSON.stringify({ 'error': error });
            }
          description: "The result of API requests is expressed in the JSON."
          timeout: "{$AZURE.DATA.TIMEOUT}"
          parameters:
            - name: app_id
              value: "{$AZURE.APP.ID}"
            - name: password
              value: "{$AZURE.PASSWORD}"
            - name: proxy
              value: "{$AZURE.PROXY}"
            - name: tenant_id
              value: "{$AZURE.TENANT.ID}"
          tags:
            - tag: class
              value: alert
            - tag: component
              value: raw
      discovery_rules:
        - uuid: 38070a5109b54d98b02c7fd8c4638911
          name: "Azure passwordCredentials - discovery rule"
          type: DEPENDENT
          key: azure.alert.get
          delay: "0"
          item_prototypes:
            - uuid: b847974f5e1f4c6cbba9618d60338fe8
              name: "Azure Password - {#PASSWORD.ID} - {#PASSWORD.APPNAME} - displayName"
              type: DEPENDENT
              key: "azure.password.get[{#PASSWORD.ID},displayName]"
              delay: "0"
              history: 7d
              value_type: TEXT
              trends: "0"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.keyId == "{#PASSWORD.ID}")].displayName.first()'
              master_item:
                key: azure.alerts.data.get
              tags:
                - tag: Application
                  value: "{#PASSWORD.APPNAME}"
            - uuid: 8eb7b4f94e68442c807507c166f574fd
              name: "Azure Password - {#PASSWORD.ID} - {#PASSWORD.APPNAME} - endDateTimeEpoch"
              type: DEPENDENT
              key: "azure.password.get[{#PASSWORD.ID},endDateTimeEpoch]"
              delay: "0"
              history: 7d
              trends: "0"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.keyId == "{#PASSWORD.ID}")].endDateTime.first()'
                - type: JAVASCRIPT
                  parameters:
                    - "return Date.parse(value) / 1000;"
              master_item:
                key: azure.alerts.data.get
              tags:
                - tag: Application
                  value: "{#PASSWORD.APPNAME}"
                - tag: Date
                  value: EndDate
              trigger_prototypes:
                - uuid: 7f8651fd0af6477fb3060718804078a2
                  expression: "last(/Azure Service Principals by HTTP/azure.password.get[{#PASSWORD.ID},endDateTimeEpoch]) < now() + 1 * 24 * 3600"
                  name: "Secret of {#PASSWORD.APPNAME} expired on {#PASSWORD.EXPIRY_DATE}"
                  priority: HIGH
                  tags:
                    - tag: Application
                      value: "{#PASSWORD.APPNAME}"
                - uuid: 67ac460f6313489ab574837e3325f029
                  expression: "last(/Azure Service Principals by HTTP/azure.password.get[{#PASSWORD.ID},endDateTimeEpoch]) < now() + {$EXPIRY.CRIT} * 24 * 3600"
                  name: "Secret of {#PASSWORD.APPNAME} expires soon (less than {$EXPIRY.CRIT} days) - on {#PASSWORD.EXPIRY_DATE}"
                  priority: AVERAGE
                  dependencies:
                    - name: "Secret of {#PASSWORD.APPNAME} expired on {#PASSWORD.EXPIRY_DATE}"
                      expression: "last(/Azure Service Principals by HTTP/azure.password.get[{#PASSWORD.ID},endDateTimeEpoch]) < now() + 1 * 24 * 3600"
                  tags:
                    - tag: Application
                      value: "{#PASSWORD.APPNAME}"
                - uuid: 318b7c5c60d84201bce160654aada58e
                  expression: "last(/Azure Service Principals by HTTP/azure.password.get[{#PASSWORD.ID},endDateTimeEpoch]) < now() + {$EXPIRY.WARN} * 24 * 3600"
                  name: "Secret of {#PASSWORD.APPNAME} expires soon (less than {$EXPIRY.WARN} days) - on {#PASSWORD.EXPIRY_DATE}"
                  priority: WARNING
                  dependencies:
                    - name: "Secret of {#PASSWORD.APPNAME} expires soon (less than {$EXPIRY.CRIT} days) - on {#PASSWORD.EXPIRY_DATE}"
                      expression: "last(/Azure Service Principals by HTTP/azure.password.get[{#PASSWORD.ID},endDateTimeEpoch]) < now() + {$EXPIRY.CRIT} * 24 * 3600"
                  tags:
                    - tag: Application
                      value: "{#PASSWORD.APPNAME}"
            - uuid: 46ea7cf8696f4770b3dd8ca757e64095
              name: "Azure Password - {#PASSWORD.ID} - {#PASSWORD.APPNAME} - endDateTime"
              type: DEPENDENT
              key: "azure.password.get[{#PASSWORD.ID},endDateTime]"
              delay: "0"
              history: 7d
              value_type: TEXT
              trends: "0"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.keyId == "{#PASSWORD.ID}")].endDateTime.first()'
              master_item:
                key: azure.alerts.data.get
              tags:
                - tag: Application
                  value: "{#PASSWORD.APPNAME}"
                - tag: Date
                  value: EndDate
            - uuid: 55458b6011194913a5b81f1815e108f3
              name: "Azure Password - {#PASSWORD.ID} - {#PASSWORD.APPNAME} - startDateTimeEpoch"
              type: DEPENDENT
              key: "azure.password.get[{#PASSWORD.ID},startDateTimeEpoch]"
              delay: "0"
              history: 7d
              value_type: FLOAT
              trends: "0"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.keyId == "{#PASSWORD.ID}")].startDateTime.first()'
                - type: JAVASCRIPT
                  parameters:
                    - "return Date.parse(value) / 1000;"
              master_item:
                key: azure.alerts.data.get
              tags:
                - tag: Application
                  value: "{#PASSWORD.APPNAME}"
                - tag: Date
                  value: StartDate
            - uuid: deffa7d783b74c54b9c7ae59087937ca
              name: "Azure Password - {#PASSWORD.ID} - {#PASSWORD.APPNAME} - startDateTime"
              type: DEPENDENT
              key: "azure.password.get[{#PASSWORD.ID},startDateTime]"
              delay: "0"
              history: 7d
              value_type: TEXT
              trends: "0"
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.keyId == "{#PASSWORD.ID}")].startDateTime.first()'
              master_item:
                key: azure.alerts.data.get
              tags:
                - tag: Application
                  value: "{#PASSWORD.APPNAME}"
                - tag: Date
                  value: StartDate
          master_item:
            key: azure.alerts.data.get
          lld_macro_paths:
            - lld_macro: "{#PASSWORD.APPID}"
              path: $.appId
            - lld_macro: "{#PASSWORD.APPNAME}"
              path: $.appdisplayName
            - lld_macro: "{#PASSWORD.EXPIRY_DATE}"
              path: $.endDateTime
            - lld_macro: "{#PASSWORD.ID}"
              path: $.keyId
      tags:
        - tag: class
          value: alert
        - tag: target
          value: azure
      macros:
        - macro: "{$AZURE.APP.ID}"
          description: "The App ID of Microsoft Azure."
        - macro: "{$AZURE.DATA.TIMEOUT}"
          value: 15s
          description: "API response timeout."
        - macro: "{$AZURE.PASSWORD}"
          type: SECRET_TEXT
          description: "Microsoft Azure password."
        - macro: "{$AZURE.PROXY}"
          description: "Sets the HTTP proxy value. If this macro is empty, then no proxy is used."
        - macro: "{$AZURE.TENANT.ID}"
          description: "Microsoft Azure tenant ID."
        - macro: "{$EXPIRY.CRIT}"
          value: "14"
        - macro: "{$EXPIRY.WARN}"
          value: "30"
